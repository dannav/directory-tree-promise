{"version":3,"sources":["../lib/directory-tree.js"],"names":["fs","require","nPath","itemType","stat","isFile","isDirectory","Item","extension","directoryTree","path","__dirname","onEachFile","name","basename","item","extname","toLowerCase","size","readdir","children","recurse","res","rej","join","child","i","setChildren","map","then","c","all","filter","length","reduce","prev","cur","module","exports"],"mappings":"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","file":"directory-tree.js","sourcesContent":["const fs = require('fs-promise')\nconst nPath = require('path')\n\nconst itemType = stat => {\n  if (stat.isFile()) {\n    return 'file'\n  }\n\n  if (stat.isDirectory()) {\n    return 'dir'\n  }\n\n  return ''\n}\n\nconst Item = {\n  isFile: () => {\n    return !!this.extension\n  }\n}\n\nconst directoryTree = async (path = __dirname, onEachFile) => {\n  const name = nPath.basename(path)\n  let item = {path, name}\n\n  try {\n    const stat = await fs.stat(path)\n\n    switch (itemType(stat)) {\n      case 'file':\n        item.extension = nPath.extname(item.path).toLowerCase()\n        item.size = stat.size\n\n        if (onEachFile && typeof onEachFile === 'function') {\n          item = await onEachFile(item)\n        }\n        break\n      case 'dir':\n        try {\n          item.children = await fs.readdir(path)\n          \n          const recurse = child => {\n            return new Promise (async (res, rej) => {\n              try {\n                const i = await directoryTree(nPath.join(path, child), onEachFile)\n                res(i)\n              } catch (e) {\n                res({})\n              }\n            })\n          }\n\n          const setChildren = item.children.map(child => {\n              return recurse(child).then(c => c)  \n          })\n\n          item.children = await Promise.all(setChildren)\n          item.children = item.children.filter(i => Object.keys(i).length) // don't include empty items\n          item.size = item.children.reduce((prev, cur) => prev + cur.size, 0)          \n        } catch (e) {\n          return {}\n        }\n\n        break\n      default:\n        return {}\n    }\n  } catch (e) {\n    return {}\n  }\n\n  return Object.assign(item, Item)  \n}\n\nmodule.exports = directoryTree"]}