{"version":3,"sources":["../lib/directory-tree.js"],"names":["fs","require","nPath","itemType","stat","isFile","isDirectory","directoryTree","path","__dirname","onEachFile","name","basename","item","extension","extname","toLowerCase","size","readdir","children","recurse","res","rej","join","child","i","setChildren","map","then","c","all","filter","length","reduce","prev","cur","module","exports"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,KAAKC,QAAQ,UAAR,CAAX;AACA,IAAMC,QAAQD,QAAQ,MAAR,CAAd;;AAEA,IAAME,WAAW,SAAXA,QAAW,OAAQ;AACvB,MAAIC,KAAKC,MAAL,EAAJ,EAAmB;AACjB,WAAO,MAAP;AACD;;AAED,MAAID,KAAKE,WAAL,EAAJ,EAAwB;AACtB,WAAO,KAAP;AACD;;AAED,SAAO,EAAP;AACD,CAVD;;AAYA,IAAMC;AAAA,sFAAgB;AAAA,QAAOC,IAAP,uEAAcC,SAAd;AAAA,QAAyBC,UAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AACdC,gBADc,GACPT,MAAMU,QAAN,CAAeJ,IAAf,CADO;AAEhBK,gBAFgB,GAET,EAAEL,UAAF,EAAQG,UAAR,EAFS;AAAA;AAAA;AAAA,mBAKCX,GAAGI,IAAH,CAAQI,IAAR,CALD;;AAAA;AAKZJ,gBALY;AAAA,2BAOVD,SAASC,IAAT,CAPU;AAAA,8CAQX,MARW,wBAiBX,KAjBW;AAAA;;AAAA;AASdS,iBAAKC,SAAL,GAAiBZ,MAAMa,OAAN,CAAcF,KAAKL,IAAnB,EAAyBQ,WAAzB,EAAjB;AACAH,iBAAKI,IAAL,GAAYb,KAAKa,IAAjB;AACAJ,iBAAKR,MAAL,GAAc,IAAd;;AAXc,kBAaVK,cAAc,OAAOA,UAAP,KAAsB,UAb1B;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAcCA,WAAWG,IAAX,CAdD;;AAAA;AAcZA,gBAdY;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,mBAmBUb,GAAGkB,OAAH,CAAWV,IAAX,CAnBV;;AAAA;AAmBZK,iBAAKM,QAnBO;;AAoBZN,iBAAKR,MAAL,GAAc,KAAd;;AAEMe,mBAtBM,GAsBI,SAAVA,OAAU,QAAS;AACvB,qBAAO;AAAA,qGAAY,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAECf,cACdL,MAAMqB,IAAN,CAAWf,IAAX,EAAiBgB,KAAjB,CADc,EAEdd,UAFc,CAFD;;AAAA;AAETe,2BAFS;;AAMfJ,8BAAII,CAAJ;AANe;AAAA;;AAAA;AAAA;AAAA;;AAQfJ,8BAAI,EAAJ;;AARe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAZ;;AAAA;AAAA;AAAA;AAAA,kBAAP;AAWD,aAlCW;;AAoCNK,uBApCM,GAoCQb,KAAKM,QAAL,CAAcQ,GAAd,CAAkB,iBAAS;AAC7C,qBAAOP,QAAQI,KAAR,EAAeI,IAAf,CAAoB;AAAA,uBAAKC,CAAL;AAAA,eAApB,CAAP;AACD,aAFmB,CApCR;AAAA;AAAA,mBAwCU,kBAAQC,GAAR,CAAYJ,WAAZ,CAxCV;;AAAA;AAwCZb,iBAAKM,QAxCO;;AAyCZN,iBAAKM,QAAL,GAAgBN,KAAKM,QAAL,CAAcY,MAAd,CAAqB;AAAA,qBAAK,oBAAYN,CAAZ,EAAeO,MAApB;AAAA,aAArB,CAAhB,CAzCY,CAyCqD;AACjEnB,iBAAKI,IAAL,GAAYJ,KAAKM,QAAL,CAAcc,MAAd,CAAqB,UAACC,IAAD,EAAOC,GAAP;AAAA,qBAAeD,OAAOC,IAAIlB,IAA1B;AAAA,aAArB,EAAqD,CAArD,CAAZ;AA1CY;AAAA;;AAAA;AAAA;AAAA;AAAA,8CA4CL,EA5CK;;AAAA;AAAA;;AAAA;AAAA,8CAiDP,EAjDO;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,8CAoDX,EApDW;;AAAA;AAAA,8CAuDbJ,IAvDa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB;;AAAA;AAAA;AAAA;AAAA,GAAN;;AA0DAuB,OAAOC,OAAP,GAAiB9B,aAAjB","file":"directory-tree.js","sourcesContent":["const fs = require('fs-extra')\nconst nPath = require('path')\n\nconst itemType = stat => {\n  if (stat.isFile()) {\n    return 'file'\n  }\n\n  if (stat.isDirectory()) {\n    return 'dir'\n  }\n\n  return ''\n}\n\nconst directoryTree = async (path = __dirname, onEachFile) => {\n  const name = nPath.basename(path)\n  let item = { path, name }\n\n  try {\n    const stat = await fs.stat(path)\n\n    switch (itemType(stat)) {\n      case 'file':\n        item.extension = nPath.extname(item.path).toLowerCase()\n        item.size = stat.size\n        item.isFile = true\n\n        if (onEachFile && typeof onEachFile === 'function') {\n          item = await onEachFile(item)\n        }\n        break\n      case 'dir':\n        try {\n          item.children = await fs.readdir(path)\n          item.isFile = false\n\n          const recurse = child => {\n            return new Promise(async (res, rej) => {\n              try {\n                const i = await directoryTree(\n                  nPath.join(path, child),\n                  onEachFile\n                )\n                res(i)\n              } catch (e) {\n                res({})\n              }\n            })\n          }\n\n          const setChildren = item.children.map(child => {\n            return recurse(child).then(c => c)\n          })\n\n          item.children = await Promise.all(setChildren)\n          item.children = item.children.filter(i => Object.keys(i).length) // don't include empty items\n          item.size = item.children.reduce((prev, cur) => prev + cur.size, 0)\n        } catch (e) {\n          return {}\n        }\n\n        break\n      default:\n        return {}\n    }\n  } catch (e) {\n    return {}\n  }\n\n  return item\n}\n\nmodule.exports = directoryTree\n"]}